import{_ as e,o as t,c as r,U as a}from"./chunks/framework.314b2323.js";const _=JSON.parse('{"title":"AchievementsCurrentUser (Class)","description":"","frontmatter":{},"headers":[],"relativePath":"unity/script-reference/AddictingGames/Achievements/AchievementsCurrentUser.md","filePath":"unity/script-reference/AddictingGames/Achievements/AchievementsCurrentUser.md"}'),c={name:"unity/script-reference/AddictingGames/Achievements/AchievementsCurrentUser.md"},n=a('<h1 id="achievementscurrentuser-class" tabindex="-1">AchievementsCurrentUser (Class) <a class="header-anchor" href="#achievementscurrentuser-class" aria-label="Permalink to &quot;AchievementsCurrentUser (Class)&quot;">​</a></h1><p>Manages retrieving and recording achievements for the currently logged-in user.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="recordachievement" tabindex="-1">RecordAchievement <a class="header-anchor" href="#recordachievement" aria-label="Permalink to &quot;RecordAchievement&quot;">​</a></h3><p>Records an achievement for the currently logged-in user.</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>string key</code></td><td>The key representing the achievement.</td></tr><tr><td><code>System.Action onSuccess</code></td><td>Callback to execute upon successful operation.</td></tr><tr><td><code>System.Action&lt;string&gt; onError</code></td><td>Callback to execute in case of an error.</td></tr></tbody></table><h3 id="getachievements" tabindex="-1">GetAchievements <a class="header-anchor" href="#getachievements" aria-label="Permalink to &quot;GetAchievements&quot;">​</a></h3><p>Retrieves the list of achievements for the currently logged-in user.</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>System.Action&lt;List&lt;Achievement&gt;&gt; onSuccess</code></td><td>Callback to execute upon successful retrieval of achievements.</td></tr><tr><td><code>System.Action&lt;string&gt; onError</code></td><td>Callback to execute in case of an error.</td></tr></tbody></table>',9),s=[n];function o(i,d,h,l,m,u){return t(),r("div",null,s)}const p=e(c,[["render",o]]);export{_ as __pageData,p as default};
