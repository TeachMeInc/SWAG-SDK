import{_ as t,o as e,c as a,X as r}from"./chunks/framework.3ba33fba.js";const y=JSON.parse('{"title":"AsyncHandler<T> (Class)","description":"","frontmatter":{},"headers":[],"relativePath":"unity/script-reference/AddictingGames/AsyncHandler.md","filePath":"unity/script-reference/AddictingGames/AsyncHandler.md"}'),o={name:"unity/script-reference/AddictingGames/AsyncHandler.md"},c=r('<h1 id="asynchandler-t-class" tabindex="-1">AsyncHandler&lt;T&gt; (Class) <a class="header-anchor" href="#asynchandler-t-class" aria-label="Permalink to &quot;AsyncHandler\\&lt;T\\&gt; (Class)&quot;">​</a></h1><p>Helper class for success/error callback handling.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td><code>T</code></td><td>The type of object expected in the successful callback.</td></tr></tbody></table><h2 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h2><table><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td><code>System.Action&lt;T&gt; onSuccess</code></td><td>Callback function to call upon success.</td></tr><tr><td><code>System.Action&lt;string&gt; onError</code></td><td>Callback function to call upon error.</td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="asynchandler-constructor" tabindex="-1">AsyncHandler (Constructor) <a class="header-anchor" href="#asynchandler-constructor" aria-label="Permalink to &quot;AsyncHandler (Constructor)&quot;">​</a></h3><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>System.Action&lt;T&gt; onSuccess</code></td><td>Callback function to set.</td></tr><tr><td><code>System.Action&lt;string&gt; onError</code></td><td>Callback function to set.</td></tr></tbody></table><h3 id="reset" tabindex="-1">Reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;Reset&quot;">​</a></h3><p>Resets the <code>onSuccess</code> and <code>onError</code> callbacks to null.</p><h3 id="resolve" tabindex="-1">Resolve <a class="header-anchor" href="#resolve" aria-label="Permalink to &quot;Resolve&quot;">​</a></h3><p>Invokes the <code>onSuccess</code> callback with the given result and resets the handlers.</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>T result</code></td><td>The result to pass to the <code>onSuccess</code> callback.</td></tr></tbody></table><h3 id="reject" tabindex="-1">Reject <a class="header-anchor" href="#reject" aria-label="Permalink to &quot;Reject&quot;">​</a></h3><p>Invokes the <code>onError</code> callback with the given error and resets the handlers.</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>string error</code></td><td>The error message to pass to the <code>onError</code> callback.</td></tr></tbody></table>',17),d=[c];function s(n,l,h,i,b,u){return e(),a("div",null,d)}const m=t(o,[["render",s]]);export{y as __pageData,m as default};
